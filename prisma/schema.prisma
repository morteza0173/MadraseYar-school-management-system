// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id String @id
  role String
  admin Admin[]
}

model Admin {
  id String @id
  username String @unique
  phone String @unique
  name String
  userId String
  users Users @relation(fields: [userId],references: [id])
  email String @unique
  nationalCode String @unique
  img String?
}

model Student {
  id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String? @unique
  address String
  img String?
  sex UserSex
  createdAt DateTime @default(now())
  parent Parent @relation(fields: [parentId],references: [id])
  parentId String
  classId Int
  class Class @relation(fields: [classId],references: [id])
  gradeId Int
  grade Grade @relation(fields: [gradeId],references: [id])
  attendance Attendance[]
  results Result[]
}

model Parent {
  id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String @unique
  address String
  createdAt DateTime @default(now())
  students Student[]
}


model Teacher {
  id String @id
  username String @unique
  name String
  surname String
  email String? @unique
  phone String? @unique
  address String
  img String?
  sex UserSex
  createdAt DateTime @default(now())
  subjects Subject[]
  lessons Lesson[]
  classes Class[]
}

model Subject {
  id Int @id @default(autoincrement())
  name String @unique
  teachers Teacher[]
  lessons Lesson[]
}

model Lesson {
  id Int @id @default(autoincrement())
  name String
  day Day
  startTime DateTime
  endTime DateTime
  subjectId Int
  subject Subject @relation(fields: [subjectId],references: [id])
  classId Int
  class Class @relation(fields: [classId],references: [id])
  teacherId String
  teacher Teacher @relation(fields: [teacherId],references: [id])
  exams Exam[]
  assignment Assignment[]
  attendance Attendance[]

}

model Class {
  id Int @id @default(autoincrement())
  name String @unique
  capacity Int
  supervisorId String
  supervisor Teacher @relation(fields: [supervisorId],references: [id])
  lessons Lesson[]
  student Student[]
  gradeId Int
  grade Grade @relation(fields: [gradeId],references: [id])
  announcements Announcement[]
  events Event[]
}

model Grade {
  id Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classes Class[]
}

model Exam {
  id Int @id @default(autoincrement())
  title String
  startTime DateTime
  endTime DateTime
  lessonId Int
  lesson Lesson @relation(fields: [lessonId],references: [id])
  results Result[]
}

model Assignment {
  id Int @id @default(autoincrement())
  title String
  StartDate DateTime
  DueDate DateTime
  lessonId Int
  lesson Lesson @relation(fields: [lessonId],references: [id])
  results Result[]
}

model Result {
  id Int @id @default(autoincrement())
  score Int

  examId Int?
  exam Exam? @relation(fields: [examId],references: [id])
  assignmentId Int?
  assignment Assignment? @relation(fields: [assignmentId],references: [id])
  studentId String
  student Student @relation(fields: [studentId],references: [id])
}

model Attendance {
  id Int @id @default(autoincrement())
  date DateTime
  present AttendanceStatus

  studentId String
  student Student @relation(fields: [studentId],references: [id])
  lessonId Int
  lesson Lesson @relation(fields: [lessonId],references: [id])

}

model Event {
  id Int @id @default(autoincrement())
  title String
  description String
  classId Int?
  class Class? @relation(fields: [classId],references: [id])
  startTime DateTime
  endTime DateTime
}

model Announcement {
  id Int @id @default(autoincrement())
  title String
  description String
  classId Int?
  class Class? @relation(fields: [classId],references: [id])
  date DateTime
}


enum UserSex {
  MALE
  FEMALE
}

enum AttendanceStatus  {
 PRESENT
 ABSENT
 LATE
}

enum Day {
SATURDAY
SUNDAY
MONDAY
TUESDAY
WEDNESDAY
}
